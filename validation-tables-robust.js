/**
 * Validation renforc√©e des tables avec garde-fous multiples
 * √Ä int√©grer dans la fonction validateJSON()
 */

// ===== VALIDATION TABLES : Section √† remplacer dans validateJSON() =====

/**
 * AVANT (code actuel - partiel) :
 * 
 * case 'table': {
 *   if (!Array.isArray(slide.tableData)) {
 *     errors.push(`Slide ${n} (table) : 'tableData' doit √™tre un tableau`);
 *   } else if (slide.tableData.length === 0) {
 *     errors.push(`Slide ${n} (table) : 'tableData' ne peut pas √™tre vide`);
 *   } else {
 *     const header = slide.tableData[0];
 *     // ... reste validation ...
 *   }
 * }
 */

/**
 * ‚úÖ APR√àS (version renforc√©e) :
 */
case 'table': {
  // Validation titre (commune √† tous les types)
  if (!isNonEmptyString(slide.title)) {
    errors.push(`Slide ${n} : propri√©t√© 'title' manquante ou vide`);
  } else if (slide.title.trim().length > TITLE_MAX_LENGTH) {
    errors.push(`Slide ${n} : le titre ne peut pas d√©passer ${TITLE_MAX_LENGTH} caract√®res (actuel : ${slide.title.trim().length})`);
  }
  
  // ‚úÖ NIVEAU 1 : Validation existence et type
  if (!slide.tableData) {
    errors.push(`Slide ${n} (table) : propri√©t√© 'tableData' manquante`);
    break; // Arr√™t ici si tableData absent
  }
  
  if (!Array.isArray(slide.tableData)) {
    errors.push(`Slide ${n} (table) : 'tableData' doit √™tre un tableau (type re√ßu: ${typeof slide.tableData})`);
    break;
  }
  
  // ‚úÖ NIVEAU 2 : Validation tableau non vide
  if (slide.tableData.length === 0) {
    errors.push(`Slide ${n} (table) : 'tableData' ne peut pas √™tre vide`);
    break;
  }
  
  // ‚úÖ NIVEAU 3 : Validation ligne d'en-t√™tes (CRITIQUE)
  const header = slide.tableData[0];
  
  if (!Array.isArray(header)) {
    errors.push(`Slide ${n} (table) : la premi√®re ligne (en-t√™tes) doit √™tre un tableau (type re√ßu: ${typeof header})`);
    break;
  }
  
  if (header.length === 0) {
    errors.push(`Slide ${n} (table) : la ligne d'en-t√™tes ne peut pas √™tre vide`);
    break;
  }
  
  // ‚úÖ NIVEAU 4 : Validation contenu des en-t√™tes
  let hasInvalidHeaders = false;
  header.forEach((cell, idx) => {
    // Accepter String ou {text: String}
    const cellText = typeof cell === 'object' && cell !== null ? cell.text : cell;
    
    if (!isNonEmptyString(cellText)) {
      errors.push(`Slide ${n} (table) : en-t√™te colonne ${idx + 1} doit √™tre une cha√Æne non vide (re√ßu: ${JSON.stringify(cell)})`);
      hasInvalidHeaders = true;
    }
  });
  
  if (hasInvalidHeaders) {
    break; // Pas la peine de valider le reste si les en-t√™tes sont cass√©s
  }
  
  // ‚úÖ NIVEAU 5 : Validation nombre de colonnes
  const colCount = header.length;
  
  if (colCount > 4) {
    errors.push(`Slide ${n} (table) : maximum 4 colonnes autoris√©es (actuel : ${colCount})`);
  }
  
  // ‚úÖ NIVEAU 6 : Validation lignes de donn√©es
  if (slide.tableData.length > 10) {
    errors.push(`Slide ${n} (table) : maximum 10 lignes autoris√©es (en-t√™tes inclus, actuel : ${slide.tableData.length})`);
  }
  
  // Validation coh√©rence nombre de colonnes
  slide.tableData.slice(1).forEach((row, idx) => {
    const rowNum = idx + 2; // +2 car idx commence √† 0 et on skip les headers
    
    if (!Array.isArray(row)) {
      errors.push(`Slide ${n} (table) ligne ${rowNum} : chaque ligne doit √™tre un tableau (type re√ßu: ${typeof row})`);
      return;
    }
    
    if (row.length !== colCount) {
      warns.push(`Slide ${n} (table) ligne ${rowNum} : nombre de colonnes incoh√©rent (${row.length} cellules vs ${colCount} en-t√™tes)`);
    }
    
    // ‚úÖ NIVEAU 7 : Validation contenu cellules (optionnel mais recommand√©)
    row.forEach((cell, cellIdx) => {
      if (cell === null || cell === undefined) {
        warns.push(`Slide ${n} (table) ligne ${rowNum} colonne ${cellIdx + 1} : cellule vide/null d√©tect√©e`);
      }
    });
  });
  
  // ‚úÖ NIVEAU 8 : Pr√©-normalisation s√©curis√©e
  try {
    slide._normalizedTableData = normalizeTableDataSafe(slide.tableData);
  } catch (normError) {
    errors.push(`Slide ${n} (table) : √©chec normalisation des donn√©es - ${normError.message}`);
  }
  
  break;
}

// ===== FONCTION NORMALISATION S√âCURIS√âE =====

/**
 * Version "safe" de normalizeTableData avec gestion d'erreur exhaustive
 */
function normalizeTableDataSafe(rows) {
  // Triple v√©rification (paranoia mode)
  if (!Array.isArray(rows)) {
    throw new Error(`tableData n'est pas un tableau (type: ${typeof rows})`);
  }
  
  if (rows.length === 0) {
    throw new Error('tableData est un tableau vide');
  }
  
  if (!Array.isArray(rows[0])) {
    throw new Error(`Premi√®re ligne (en-t√™tes) n'est pas un tableau (type: ${typeof rows[0]})`);
  }
  
  if (rows[0].length === 0) {
    throw new Error('Ligne d\'en-t√™tes est vide');
  }
  
  // Normalisation ligne par ligne
  return rows.map((row, idxRow) => {
    // Gestion ligne non-tableau (conversion forc√©e)
    if (!Array.isArray(row)) {
      console.warn(`normalizeTableDataSafe: ligne ${idxRow} n'est pas un tableau, conversion en [row]`);
      row = [row];
    }
    
    return row.map((cell, idxCell) => {
      // Si d√©j√† au format {text, options}, conserver
      if (cell && typeof cell === 'object' && !Array.isArray(cell) && 'text' in cell) {
        return {
          text: String(cell.text ?? ''),
          options: cell.options || (idxRow === 0 ? { bold: true, fill: 'E1E1E1', color: '000000' } : {})
        };
      }
      
      // Conversion primitive ‚Üí objet format√©
      let textValue;
      
      if (cell === null || cell === undefined) {
        textValue = '';
      } else if (typeof cell === 'object') {
        // Objet bizarre sans 'text' ‚Üí stringify
        textValue = JSON.stringify(cell);
      } else {
        textValue = String(cell);
      }
      
      return {
        text: textValue,
        options: idxRow === 0 ? { 
          bold: true, 
          fill: 'E1E1E1', 
          color: '000000' 
        } : {}
      };
    });
  });
}

// ===== TESTS UNITAIRES (√† ex√©cuter en dev) =====

/**
 * Tests √† lancer dans la console pour valider la robustesse
 */
function runTableValidationTests() {
  const tests = [
    {
      name: 'Table valide standard',
      input: [['A', 'B'], ['1', '2'], ['3', '4']],
      shouldPass: true
    },
    {
      name: 'Table avec null dans data',
      input: [['A', 'B'], [null, '2'], ['3', undefined]],
      shouldPass: true, // Devrait passer avec warnings
      expectWarnings: true
    },
    {
      name: 'Table sans en-t√™tes',
      input: [],
      shouldPass: false
    },
    {
      name: 'Table avec en-t√™te non-tableau',
      input: ['wrong', ['1', '2']],
      shouldPass: false
    },
    {
      name: 'Table avec colonnes incoh√©rentes',
      input: [['A', 'B'], ['1'], ['2', '3', '4']],
      shouldPass: true, // Passe mais warnings
      expectWarnings: true
    },
    {
      name: 'Table avec objets d√©j√† format√©s',
      input: [
        [{text: 'A', options: {bold: true}}, {text: 'B'}],
        [{text: '1'}, {text: '2'}]
      ],
      shouldPass: true
    }
  ];
  
  console.group('üß™ Tests validation tables');
  
  tests.forEach(test => {
    console.log(`\n‚ñ∂ Test: ${test.name}`);
    try {
      const normalized = normalizeTableDataSafe(test.input);
      console.log(test.shouldPass ? '‚úÖ PASS' : '‚ùå FAIL (devrait √©chouer)');
      console.log('R√©sultat:', normalized);
    } catch (err) {
      console.log(test.shouldPass ? `‚ùå FAIL: ${err.message}` : '‚úÖ PASS (erreur attendue)');
    }
  });
  
  console.groupEnd();
}

// D√©commenter pour tester en dev:
// runTableValidationTests();
